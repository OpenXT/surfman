dnl
dnl
dnl configure.in.head:
dnl
dnl
dnl $Id:$
dnl
dnl $Log:$
dnl
dnl
dnl
AC_PREREQ(2.13)
AC_INIT(src/surfman.c)

AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_PROG_AWK
AC_CHECK_PROG(MD5SUM,md5sum,md5sum)
AC_CHECK_PROG(GREP,grep,grep)

AC_SYS_LARGEFILE

PKG_CHECK_MODULES([DBUS],[dbus-1])
PKG_CHECK_MODULES([PNG], [libpng])

SURFMAN_MAJOR_VERSION=`cat $srcdir/version-major`
SURFMAN_MINOR_VERSION=`cat $srcdir/version-minor`
SURFMAN_MICRO_VERSION=`cat $srcdir/version-micro`


SURFMAN_VERSION=$SURFMAN_MAJOR_VERSION.$SURFMAN_MINOR_VERSION.$SURFMAN_MICRO_VERSION

AC_SUBST(SURFMAN_MAJOR_VERSION)
AC_SUBST(SURFMAN_MINOR_VERSION)
AC_SUBST(SURFMAN_MICRO_VERSION)
AC_SUBST(SURFMAN_VERSION)


VERSION=$SURFMAN_VERSION
PACKAGE=surfman

AM_INIT_AUTOMAKE($PACKAGE,$VERSION)


AM_CONFIG_HEADER(src/config.h)

# Checks for header files.
AC_CHECK_HEADERS([malloc.h])
AC_HEADER_STDC
AC_FUNC_MALLOC

AC_C_INLINE
AC_C_CONST

AC_ARG_WITH(idldir,AC_HELP_STRING([--with-idldir=PATH],[Path to dbus idl desription files]),
            IDLDIR=$with_idldir,IDLDIR=/usr/share/idl)

AC_SUBST(IDLDIR)

# libsurfman

LIBSURFMAN_CONFIG=no
AC_ARG_WITH(libsurfman,
        AC_HELP_STRING([--with-libsurfman=PATH],[Path to libsurfman-config]),
                LIBSURFMAN_CONFIG=$with_libsurfman,LIBSURFMAN_CONFIG=no)

case "x$LIBSURFMAN_CONFIG" in
        xno)
		AC_PATH_PROG(LIBSURFMAN_CONFIG, libsurfman-config, no)
        ;;
        x|xyes)
		AC_PATH_PROG(LIBSURFMAN_CONFIG, libsurfman-config, no)
        ;;
        *)
        ;;
esac

if ! test -x $LIBSURFMAN_CONFIG; then
  PKG_CHECK_MODULES([LIBSURFMAN], [libsurfman])
  LIBSURFMAN_INC="$LIBSURFMAN_CFLAGS"
  LIBSURFMAN_LIB="$LIBSURFMAN_LIBS"
else
  LIBSURFMAN_INC=`$LIBSURFMAN_CONFIG --cflags`
  LIBSURFMAN_LIB=`$LIBSURFMAN_CONFIG --libs`
fi

AC_SUBST(LIBSURFMAN_INC)
AC_SUBST(LIBSURFMAN_LIB)

# libxenbackend

LIBXENBACKEND_CONFIG=no
AC_ARG_WITH(libxenbackend,
        AC_HELP_STRING([--with-libxenbackend=PATH],[Path to libxenbackend-config]),
                LIBXENBACKEND_CONFIG=$with_libxenbackend,LIBXENBACKEND_CONFIG=no)

case "x$LIBXENBACKEND_CONFIG" in
        xno)
		AC_PATH_PROG(LIBXENBACKEND_CONFIG, libxenbackend-config, no)
        ;;
        x|xyes)
		AC_PATH_PROG(LIBXENBACKEND_CONFIG, libxenbackend-config, no)
        ;;
        *)
        ;;
esac

if ! test -x $LIBXENBACKEND_CONFIG; then
  PKG_CHECK_MODULES([LIBXENBACKEND], [libxenbackend])
  LIBXENBACKEND_INC="$LIBXENBACKEND_CFLAGS"
  LIBXENBACKEND_LIB="$LIBXENBACKEND_LIBS"
else
  LIBXENBACKEND_INC=`$LIBXENBACKEND_CONFIG --cflags`
  LIBXENBACKEND_LIB=`$LIBXENBACKEND_CONFIG --libs`
fi

AC_SUBST(LIBXENBACKEND_INC)
AC_SUBST(LIBXENBACKEND_LIB)

# libxenstore

AC_ARG_WITH([libxenstore],
            AC_HELP_STRING([--with-libxenstore=PATH], [Path to prefix where libxenstore was installed.]),
            [LIBXENSTORE_PREFIX=$with_libxenstore], [])

case "x$LIBXENSTORE_PREFIX" in
        x|xno|xyes)
                LIBXENSTORE_INC=""
                LIBXENSTORE_LIB="-lxenstore"
                ;;
        *)
                LIBXENSTORE_INC="-I${LIBXENSTORE_PREFIX}/include"
                LIBXENSTORE_LIB="-L${LIBXENSTORE_PREFIX}/lib -lxenstore"
                ;;
esac

AC_SUBST(LIBXENSTORE_INC)
AC_SUBST(LIBXENSTORE_LIB)

have_libxenstore=true

ORIG_LDFLAGS="${LDFLAGS}"
ORIG_CPPFLAGS="${CPPFLAGS}"
	LDFLAGS="${LDFLAGS} ${LIBXENSTORE_LIB}"
	CPPFLAGS="${CPPFLAGS} ${LIBXENSTORE_INC}"
	AC_CHECK_HEADERS([xs.h], [], [have_libxenstore=false])
	AC_CHECK_FUNC(xs_domain_open, [], [have_libxenstore=false])
LDFLAGS="${ORIG_LDFLAGS}"
CPPFLAGS="${ORIG_CPPFLAGS}"

if test "x$have_libxenstore" = "xfalse"; then
	AC_MSG_ERROR([where is libxenstore dude])
fi

# libv4v

AC_ARG_WITH([libv4v],
            AC_HELP_STRING([--with-libv4v=PATH], [Path to prefix where libv4v was installed.]),
            [LIBV4V_PREFIX=$with_libv4v], [])

case "x$LIBV4V_PREFIX" in
        x|xno|xyes)
                LIBV4V_INC=""
                LIBV4V_LIB="-lv4v"
                ;;
        *)
                LIBV4V_INC="-I${LIBV4V_PREFIX}/include"
                LIBV4V_LIB="-L${LIBV4V_PREFIX}/lib -lv4v"
                ;;
esac

AC_SUBST(LIBV4V_INC)
AC_SUBST(LIBV4V_LIB)

have_libv4v=true

ORIG_LDFLAGS="${LDFLAGS}"
ORIG_CPPFLAGS="${CPPFLAGS}"
	LDFLAGS="${LDFLAGS} ${LIBV4V_LIB}"
	CPPFLAGS="${CPPFLAGS} ${LIBV4V_INC}"
	AC_CHECK_HEADERS([libv4v.h], [], [have_libv4v=false])
	AC_CHECK_FUNC(v4v_socket, [], [have_libv4v=false])
LDFLAGS="${ORIG_LDFLAGS}"
CPPFLAGS="${ORIG_CPPFLAGS}"

if test "x$have_libv4v" = "xfalse"; then
	AC_MSG_ERROR([where is libv4v dude])
fi


# libdmbus

AC_ARG_WITH([libdmbus],
            AC_HELP_STRING([--with-libdmbus=PATH], [Path to prefix where libdmbus was installed.]),
            [LIBDMBUS_PREFIX=$with_libdmbus], [])

case "x$LIBDMBUS_PREFIX" in
        x|xno|xyes)
                LIBDMBUS_INC=""
                LIBDMBUS_LIB="-ldmbus"
                ;;
        *)
                LIBDMBUS_INC="-I${LIBDMBUS_PREFIX}/include"
                LIBDMBUS_LIB="-L${LIBDMBUS_PREFIX}/lib -ldmbus"
                ;;
esac

AC_SUBST(LIBDMBUS_INC)
AC_SUBST(LIBDMBUS_LIB)

have_libdmbus=true

ORIG_LDFLAGS="${LDFLAGS}"
ORIG_CPPFLAGS="${CPPFLAGS}"
	LDFLAGS="${LDFLAGS} ${LIBV4V_LIB} ${LIBDMBUS_LIB}" 
	CPPFLAGS="${CPPFLAGS} ${LIBV4V_INC} ${LIBDMBUS_INC}"
	AC_CHECK_HEADERS([libdmbus.h], [], [have_libdmbus=false])
	AC_CHECK_FUNC(dmbus_init, [], [have_libdmbus=false])
LDFLAGS="${ORIG_LDFLAGS}"
CPPFLAGS="${ORIG_CPPFLAGS}"

if test "x$have_libdmbus" = "xfalse"; then
	AC_MSG_ERROR([where is libdmbus dude])
fi

# libedid

AC_ARG_WITH([libedid],
        AC_HELP_STRING([--with-libedid=PATH],[Path to prefix where libedid was installed.]),
        [LIBEDID_PREFIX=$with_libedid], [])

case "x$LIBEDID_PREFIX" in
        x|xno|xyes)
                LIBEDID_INC=""
                LIBEDID_LIB="-ledid"
                ;;
        *)
                LIBEDID_INC="-I${LIBEDID_PREFIX}/include"
                LIBEDID_LIB="-L${LIBEDID_PREFIX}/lib -ledid"
                ;;
esac

AC_SUBST(LIBEDID_INC)
AC_SUBST(LIBEDID_LIB)

have_libedid=true

ORIG_LDFLAGS="${LDFLAGS}"
ORIG_CPPFLAGS="${CPPFLAGS}"
	LDFLAGS="${LDFLAGS} ${LIBEDID_LIB}" 
	CPPFLAGS="${CPPFLAGS} ${LIBEDID_INC}"
	AC_CHECK_HEADERS([edid.h], [], [have_libedid=false])
	AC_CHECK_FUNC(edid_parse, [], [have_libedid=false])
LDFLAGS="${ORIG_LDFLAGS}"
CPPFLAGS="${ORIG_CPPFLAGS}"

if test "x$have_libedid" = "xfalse"; then
	AC_MSG_ERROR([where is libedid dude])
fi

# libpciaccess

AC_ARG_WITH([libpciaccess],
        AC_HELP_STRING([--with-libpciaccess=PATH],[Path to prefix where libpciaccess was installed.]),
        [LIBPCIACCESS_PREFIX=$with_libpciaccess], [])

case "x$LIBPCIACCESS_PREFIX" in
        x|xno|xyes)
                LIBPCIACCESS_INC=""
                LIBPCIACCESS_LIB="-lpciaccess"
                ;;
        *)
                LIBPCIACCESS_INC="-I${LIBPCIACCESS_PREFIX}/include"
                LIBPCIACCESS_LIB="-L${LIBPCIACCESS_PREFIX}/lib -lpciaccess"
                ;;
esac

AC_SUBST(LIBPCIACCESS_INC)
AC_SUBST(LIBPCIACCESS_LIB)

have_libpciaccess=true

ORIG_LDFLAGS="${LDFLAGS}"
ORIG_CPPFLAGS="${CPPFLAGS}"
	LDFLAGS="${LDFLAGS} ${LIBPCIACCESS_LIB}" 
	CPPFLAGS="${CPPFLAGS} ${LIBPCIACCESS_INC}"
	AC_CHECK_HEADERS([pciaccess.h], [], [have_libpciaccess=false])
	AC_CHECK_FUNC(pci_system_init, [], [have_libpciaccess=false])
LDFLAGS="${ORIG_LDFLAGS}"
CPPFLAGS="${ORIG_CPPFLAGS}"

if test "x$have_libpciaccess" = "xfalse"; then
	AC_MSG_ERROR([where is libpciaccess dude])
fi
# xenfb


AC_ARG_WITH([fb2if],
            AC_HELP_STRING([--with-fb2if=PATH],[Path to prefix where fb2if.h was installed.]),
            [FB2IF_PREFIX=$with_fb2if], [])
case "x$FB2IF_PREFIX" in
        x)
                FB2IF_INC=""
                ;;
        *)
                FB2IF_INC="-I${FB2IF_PREFIX}/include"
                ;;
esac

AC_SUBST(FB2IF_INC)

have_fb2if=true

ORIG_CPPFLAGS="${CPPFLAGS}"
	CPPFLAGS="${CPPFLAGS} ${FB2IF_INC}"
	AC_CHECK_HEADERS([fb2if.h], [], [have_fb2if=false])
CPPFLAGS="${ORIG_CPPFLAGS}"
if test "x$have_fb2if" = "xfalse"; then
	AC_MSG_ERROR([Cannot find fb2if.h])
fi

# dlopen

ORIG_LIBS="${LIBS}"
LIBS=""
AC_SEARCH_LIBS([dlopen], [dl dld], [], [
  AC_MSG_ERROR([unable to find the dlopen() function])
])
DL_LIB="${LIBS}"
LIBS="${ORIG_LIBS}"

AC_SUBST(DL_LIB)

AC_ARG_WITH(libxc,
            AC_HELP_STRING([--with-libxc=PATH],
                           [Path to prefix where where libxc and xen were installed]),
            LIBXC_PREFIX=$with_libxc, [])

case "x$LIBXC_PREFIX" in
        x|xno)
                LIBXC_INC=""
                LIBXC_LIB="-lxenctrl"
                ;;
        xyes)
                LIB_SWITCH="xenctrl"
                LIBXC_INC=""
                LIBXC_LIB="-lxenctrl"
                ;;
        *)
                LIB_SWITCH="xenctrl"
                LIBXC_INC="-I${LIBXC_PREFIX}/include"
                LIBXC_LIB="-L${LIBXC_PREFIX}/lib -lxenctrl"
                ;;
esac

AC_SUBST(LIBXC_INC)
AC_SUBST(LIBXC_LIB)

have_libxenctrl=true

ORIG_LDFLAGS="${LDFLAGS}"
ORIG_CPPFLAGS="${CPPFLAGS}"
        LDFLAGS="${LDFLAGS} ${LIBXC_LIB}"
        CPPFLAGS="${CPPFLAGS} ${LIBXC_INC}"
        AC_CHECK_HEADERS([xenctrl.h], [], [have_libxenctrl=false])
        AC_CHECK_FUNC(xc_version, [], [have_libxenctrl=false])
        AS_IF([test "x$have_libxenctrl" = "xtrue"],
              [AC_MSG_WARN(going with libxc)
               AC_DEFINE([HAVE_XENCTRL_H], [1],
                         [Define to 1 if you link with an existing version of libxc])],
              [AC_MSG_ERROR(didnt find sufficiently recent xenctrl)])
LDFLAGS="${ORIG_LDFLAGS}"
CPPFLAGS="${ORIG_CPPFLAGS}"

AC_OUTPUT([Makefile
	   src/Makefile
	   src/version.h
	   app/Makefile])
